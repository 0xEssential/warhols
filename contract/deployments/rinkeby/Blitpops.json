{
  "address": "0x4a3401ac112C7dfA60103ab9Db55355BF7Ce0eF3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blitmapAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLITMAP_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROYALTY_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter",
          "type": "string"
        }
      ],
      "name": "addFilter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "filtersFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "revisions",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "filter1",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "filter2",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "filter3",
              "type": "string"
            }
          ],
          "internalType": "struct Blitpops.FilterMatrix",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listFilters",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "filter1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter2",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter3",
          "type": "string"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerSaleEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "filter1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter2",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter3",
          "type": "string"
        }
      ],
      "name": "svgBase64Data",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "filter1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter2",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "filter3",
          "type": "string"
        }
      ],
      "name": "updateFilters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a764967dbd2957870282f2bad9a5a6e668587d22f0d9392b0baad9d587ba89d",
  "receipt": {
    "to": null,
    "from": "0xc102f76973f4890cAB1b5d1ed26F3623381983aF",
    "contractAddress": "0x4a3401ac112C7dfA60103ab9Db55355BF7Ce0eF3",
    "transactionIndex": 5,
    "gasUsed": "4169294",
    "logsBloom": "0x
    "blockHash": "0xc47a5708527c47d3618bb595bd55e8f7ad6a970de87b03a66292f604d4fb7879",
    "transactionHash": "0x5a764967dbd2957870282f2bad9a5a6e668587d22f0d9392b0baad9d587ba89d",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 9172701,
        "transactionHash": "0x5a764967dbd2957870282f2bad9a5a6e668587d22f0d9392b0baad9d587ba89d",
        "address": "0x4a3401ac112C7dfA60103ab9Db55355BF7Ce0eF3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c102f76973f4890cab1b5d1ed26f3623381983af"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xc47a5708527c47d3618bb595bd55e8f7ad6a970de87b03a66292f604d4fb7879"
      }
    ],
    "blockNumber": 9172701,
    "cumulativeGasUsed": "5113126",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf6A56f5B9cff7f84320C85C71Cac94092d3CD424"
  ],
  "solcInputHash": "88ed3feab592198d5b4616f3670c361f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blitmapAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLITMAP_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTY_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter\",\"type\":\"string\"}],\"name\":\"addFilter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"filtersFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"revisions\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"filter1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter3\",\"type\":\"string\"}],\"internalType\":\"struct Blitpops.FilterMatrix\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFilters\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"filter1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter3\",\"type\":\"string\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerSaleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"filter1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter3\",\"type\":\"string\"}],\"name\":\"svgBase64Data\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"filter1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"filter3\",\"type\":\"string\"}],\"name\":\"updateFilters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Blitpops/Blitpops.sol\":\"Blitpops\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x90716b47325c5cd49d4eef5bbe4cba711c81ce317479038e4f0a9a17a206945a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0x3a90d0ca7f93e5dcd49903fd25a64ce6eb00ecaaed09438b9c061ef5c5391d13\",\"license\":\"MIT\"},\"contracts/Blitpops/Blitpops.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {IBlitmap} from \\\"../Interfaces/IBlitmap.sol\\\";\\nimport {Base64} from \\\"../Base64.sol\\\";\\nimport {strings} from \\\"../StringUtils.sol\\\";\\n\\n\\ncontract Blitpops is ERC721Enumerable, Ownable, ERC165Storage {\\n    using strings for *;\\n    using Strings for uint256;\\n\\n    struct FilterMatrix {\\n        uint256 revisions;\\n        string filter1;\\n        string filter2;\\n        string filter3;\\n    }\\n\\n    mapping(uint256 => FilterMatrix) internal filterMap;\\n    uint256 public constant MINT_PRICE = 0.02 ether;\\n    uint256 public constant ROYALTY_AMOUNT = 10;\\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    address public BLITMAP_ADDRESS;\\n    uint256 public ownerSaleEnd;\\n    mapping(string => string) internal filters;\\n    string[] internal filterNames;\\n\\n\\n\\n    constructor(address blitmapAddress) payable ERC721(\\\"Blitpop\\\", \\\"BLITPOP\\\") {\\n        _registerInterface(_INTERFACE_ID_ERC2981);\\n        BLITMAP_ADDRESS = blitmapAddress;\\n        filters['og'] = '<svg>';\\n        filters['campbells'] = '<filter id=\\\"campbells\\\"><feColorMatrix type=\\\"matrix\\\" values=\\\"1 0 0 1.9 -2.2 0 1 0 0.0 0.3 0 0 1 0 0.5 0 0 0 1 0.2\\\"></feColorMatrix></filter><svg filter=\\\"url(#campbells)\\\">';\\n        filters['electric-chair'] = '<filter id=\\\"ec\\\"><feColorMatrix type=\\\"matrix\\\" values=\\\"1 0 0 0 0 -0.4 1.3 -0.4 0.2 -0.1 0 0 1 0 0 0 0 0 1 0\\\"></feColorMatrix></filter><svg filter=\\\"url(#ec)\\\">';\\n        filters['marilyn'] = '<filter id=\\\"marilyn\\\"><feColorMatrix type=\\\"matrix\\\" values=\\\"1 0 0 1.7 -1.6 0 1 0 0.0 0.3 -0.7 0 1 0 0.5 0 0 0 1 0.2\\\"></feColorMatrix></filter><svg filter=\\\"url(#marilyn)\\\">';\\n        filters['brillo'] = '<filter id=\\\"brillo\\\"><feColorMatrix type=\\\"matrix\\\" values=\\\"0 1.0 0 0 0 0 1.0 0 0 0 0 0.6 1 0 0 0 0 0 1 0 \\\"/></filter><svg filter=\\\"url(#brillo)\\\">';\\n        filters['b&w'] = '<filter id=\\\"bw\\\"><feColorMatrix type=\\\"matrix\\\" values=\\\"0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 1 0 \\\"/></filter><svg filter=\\\"url(#bw)\\\">';\\n        filterNames = ['og', 'campbells', 'electric-chair', 'marilyn', 'brillo', 'b&w'];\\n        ownerSaleEnd = block.timestamp + 7 days;\\n    }\\n\\n    function addFilter(string memory name, string memory filter) public onlyOwner {\\n        filterNames.push(name);\\n        filters[name] = filter;\\n    }\\n\\n    function listFilters() public view returns(string[] memory) {\\n        return filterNames;\\n    }\\n\\n    function filtersFor(uint256 tokenId) public view returns (FilterMatrix memory) {\\n        return filterMap[tokenId];\\n    }\\n\\n    function ownerMint(\\n        uint256 tokenId,\\n        string memory filter1,\\n        string memory filter2,\\n        string memory filter3) public payable {\\n        // if (block.timestamp <= ownerSaleEnd){\\n        //     require(msg.value == MINT_PRICE, \\\"Bp:oM:402\\\");\\n        //     require(msg.sender == IBlitmap(BLITMAP_ADDRESS).ownerOf(tokenId), \\\"Bp:oM:403\\\");\\n        // }\\n\\n        // if (block.timestamp > ownerSaleEnd) {\\n        //     require(msg.sender == owner(), \\\"Bp:oM:403\\\");\\n        // }\\n\\n        filterMap[tokenId] = FilterMatrix({\\n            revisions: 0,\\n            filter1: filter1,\\n            filter2: filter2,\\n            filter3: filter3\\n        });\\n\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    function updateFilters(\\n        uint256 tokenId,\\n        string memory filter1,\\n        string memory filter2,\\n        string memory filter3\\n    ) public {\\n        require(msg.sender == ownerOf(tokenId), \\\"Bp:uF:403\\\");\\n        filterMap[tokenId] = FilterMatrix({\\n            revisions: filterMap[tokenId].revisions + 1,\\n            filter1: filter1,\\n            filter2: filter2,\\n            filter3: filter3\\n        });\\n    }\\n\\n    /* solhint-disable quotes */\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"Bp:tU:404\\\");\\n\\n        FilterMatrix memory tokenFilters = filterMap[tokenId];\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"Blitpop ',\\n                                IBlitmap(BLITMAP_ADDRESS).tokenNameOf(tokenId),\\n                                '\\\", \\\"description\\\":\\\"Blitpops are onchain Blitmap derivatives. To construct the artwork, the original Blitmap with corresponding token ID is fetched, collaged and filtered to return a modified onchain SVG.\\\", \\\"image\\\": \\\"',\\n                                svgBase64Data(tokenId, tokenFilters.filter1, tokenFilters.filter2, tokenFilters.filter3),\\n                                '\\\", ',\\n                                tokenProperties(tokenFilters),\\n                                '\\\"}}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function tokenProperties(FilterMatrix memory tokenFilters) internal view returns (bytes memory) {\\n        return abi.encodePacked(\\n            '\\\"properties\\\": { \\\"revisions\\\": \\\"',\\n            tokenFilters.revisions.toString(),\\n            '\\\", \\\"Top Right\\\": \\\"',\\n            tokenFilters.filter1,\\n            '\\\", \\\"Bottom Left\\\": \\\"',\\n            tokenFilters.filter2,\\n            '\\\", \\\"Bottom Right\\\": \\\"',\\n            tokenFilters.filter3\\n        );\\n    }\\n\\n    function svgBase64Data(\\n        uint256 tokenId,\\n        string memory filter1,\\n        string memory filter2,\\n        string memory filter3\\n    ) public view returns (string memory) {\\n        return string(\\n            abi.encodePacked(\\n                'data:image/svg+xml;base64,',\\n                Base64.encode(svgRaw(tokenId, filter1, filter2, filter3))\\n            )\\n        );\\n    }\\n\\n    function svgRaw(\\n        uint256 tokenId,\\n        string memory filter1,\\n        string memory filter2,\\n        string memory filter3\\n    ) internal view returns (bytes memory) {\\n        string memory viewbox = 'viewBox=\\\"0 0 32 32\\\">';\\n        strings.slice memory main = IBlitmap(BLITMAP_ADDRESS).tokenSvgDataOf(tokenId).toSlice();\\n        strings.slice memory start = main.split(viewbox.toSlice());\\n\\n        return abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 64 64\\\"><svg viewBox=\\\"0 0 32 32\\\" width=\\\"32\\\" height=\\\"32\\\">',\\n            main.toString(),\\n            '<svg viewBox=\\\"0 0 32 32\\\" width=\\\"32\\\" height=\\\"32\\\" x=\\\"32\\\">',\\n            filters[filter1],\\n            main.toString(),\\n            '</svg><svg viewBox=\\\"0 0 32 32\\\" width=\\\"32\\\" height=\\\"32\\\" y=\\\"32\\\">',\\n            filters[filter2],\\n            main.toString(),\\n            '</svg><svg viewBox=\\\"0 0 32 32\\\" width=\\\"32\\\" height=\\\"32\\\" x=\\\"32\\\" y=\\\"32\\\">',\\n            filters[filter3],\\n            main.toString(),\\n            '</svg></svg>'\\n        );\\n    }\\n\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 value,\\n        bytes calldata _data\\n    ) external view returns (address _receiver, uint256 royaltyAmount) {\\n        royaltyAmount = (value * ROYALTY_AMOUNT) / 100;\\n\\n        return (owner(), royaltyAmount);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165Storage, ERC721Enumerable) returns (bool) {\\n        return ERC721Enumerable.supportsInterface(interfaceId) || ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb584a10682dc4aded0d8e2b8c84453b18504eaae8694e01a37a8a0dd052e506b\",\"license\":\"MIT\"},\"contracts/Interfaces/IBlitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\ninterface IBlitmap is IERC721 {\\n    function tokenNameOf(uint256 tokenId) external view returns (string memory);\\n    function tokenSvgDataOf(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8a9c6013b9f17ea96ab996b37f84198c88aa54aafc89896257e22e177e756e6a\",\"license\":\"MIT\"},\"contracts/StringUtils.sol\":{\"content\":\"/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n */\\n\\npragma solidity >=0.8.0;\\n\\nlibrary strings {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the length of a null-terminated bytes32 string.\\n     * @param self The value to find the length of.\\n     * @return The length of the string, from 0 to 32.\\n     */\\n    function len(bytes32 self) internal pure returns (uint) {\\n        uint ret;\\n        if (self == 0)\\n            return 0;\\n        if (uint(self) & 0xffffffffffffffffffffffffffffffff == 0) {\\n            ret += 16;\\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\\n        }\\n        if (uint(self) & 0xffffffffffffffff == 0) {\\n            ret += 8;\\n            self = bytes32(uint(self) / 0x10000000000000000);\\n        }\\n        if (uint(self) & 0xffffffff == 0) {\\n            ret += 4;\\n            self = bytes32(uint(self) / 0x100000000);\\n        }\\n        if (uint(self) & 0xffff == 0) {\\n            ret += 2;\\n            self = bytes32(uint(self) / 0x10000);\\n        }\\n        if (uint(self) & 0xff == 0) {\\n            ret += 1;\\n        }\\n        return 32 - ret;\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\n     *      null-terminated utf-8 string.\\n     * @param self The bytes32 value to convert to a slice.\\n     * @return A new slice containing the value of the input argument up to the\\n     *         first null.\\n     */\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, 0x20))\\n            mstore(ptr, self)\\n            mstore(add(ret, 0x20), ptr)\\n        }\\n        ret._len = len(self);\\n    }\\n\\n    /*\\n     * @dev Returns a new slice containing the same data as the current slice.\\n     * @param self The slice to copy.\\n     * @return A new slice containing the same data as `self`.\\n     */\\n    function copy(slice memory self) internal pure returns (slice memory) {\\n        return slice(self._len, self._ptr);\\n    }\\n\\n    /*\\n     * @dev Copies a slice to a new string.\\n     * @param self The slice to copy.\\n     * @return A newly allocated string containing the slice's text.\\n     */\\n    function toString(slice memory self) internal pure returns (string memory) {\\n        string memory ret = new string(self._len);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n\\n        memcpy(retptr, self._ptr, self._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the length in runes of the slice. Note that this operation\\n     *      takes time proportional to the length of the slice; avoid using it\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\n     *      the slice is empty or not.\\n     * @param self The slice to operate on.\\n     * @return The length of the slice in runes.\\n     */\\n    function len(slice memory self) internal pure returns (uint l) {\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\n        uint ptr = self._ptr - 31;\\n        uint end = ptr + self._len;\\n        for (l = 0; ptr < end; l++) {\\n            uint8 b;\\n            assembly { b := and(mload(ptr), 0xFF) }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if(b < 0xE0) {\\n                ptr += 2;\\n            } else if(b < 0xF0) {\\n                ptr += 3;\\n            } else if(b < 0xF8) {\\n                ptr += 4;\\n            } else if(b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first slice to compare.\\n     * @param other The second slice to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\\n        uint shortest = self._len;\\n        if (other._len < self._len)\\n            shortest = other._len;\\n\\n        uint selfptr = self._ptr;\\n        uint otherptr = other._ptr;\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\n            int a;\\n            int b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                int256 mask = int256(-1); // 0xffff...\\n                if(shortest < 32) {\\n                  mask = int256(~(2 ** (8 * (32 - shortest + idx)) - 1));\\n                }\\n                int256 diff = (a & mask) - (b & mask);\\n                if (diff != 0)\\n                    return int(diff);\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n        return int(self._len) - int(other._len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two slices contain the same text.\\n     * @param self The first slice to compare.\\n     * @param self The second slice to compare.\\n     * @return True if the slices are equal, false otherwise.\\n     */\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\n        return compare(self, other) == 0;\\n    }\\n\\n    /*\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\n     *      slice to point to the next rune and returning `self`.\\n     * @param self The slice to operate on.\\n     * @param rune The slice that will contain the first rune.\\n     * @return `rune`.\\n     */\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\n        rune._ptr = self._ptr;\\n\\n        if (self._len == 0) {\\n            rune._len = 0;\\n            return rune;\\n        }\\n\\n        uint l;\\n        uint b;\\n        // Load the first byte of the rune into the LSBs of b\\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\\n        if (b < 0x80) {\\n            l = 1;\\n        } else if(b < 0xE0) {\\n            l = 2;\\n        } else if(b < 0xF0) {\\n            l = 3;\\n        } else {\\n            l = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (l > self._len) {\\n            rune._len = self._len;\\n            self._ptr += self._len;\\n            self._len = 0;\\n            return rune;\\n        }\\n\\n        self._ptr += l;\\n        self._len -= l;\\n        rune._len = l;\\n        return rune;\\n    }\\n\\n    /*\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\n     *      to the next rune.\\n     * @param self The slice to operate on.\\n     * @return A slice containing only the first rune from `self`.\\n     */\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\n        nextRune(self, ret);\\n    }\\n\\n    /*\\n     * @dev Returns the number of the first codepoint in the slice.\\n     * @param self The slice to operate on.\\n     * @return The number of the first codepoint in the slice.\\n     */\\n    function ord(slice memory self) internal pure returns (uint ret) {\\n        if (self._len == 0) {\\n            return 0;\\n        }\\n\\n        uint word;\\n        uint length;\\n        uint divisor = 2 ** 248;\\n\\n        // Load the rune into the MSBs of b\\n        assembly { word:= mload(mload(add(self, 32))) }\\n        uint b = word / divisor;\\n        if (b < 0x80) {\\n            ret = b;\\n            length = 1;\\n        } else if(b < 0xE0) {\\n            ret = b & 0x1F;\\n            length = 2;\\n        } else if(b < 0xF0) {\\n            ret = b & 0x0F;\\n            length = 3;\\n        } else {\\n            ret = b & 0x07;\\n            length = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (length > self._len) {\\n            return 0;\\n        }\\n\\n        for (uint i = 1; i < length; i++) {\\n            divisor = divisor / 256;\\n            b = (word / divisor) & 0xFF;\\n            if (b & 0xC0 != 0x80) {\\n                // Invalid UTF-8 sequence\\n                return 0;\\n            }\\n            ret = (ret * 64) | (b & 0x3F);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if `self` starts with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        if (self._ptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let selfptr := mload(add(self, 0x20))\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        bool equal = true;\\n        if (self._ptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let selfptr := mload(add(self, 0x20))\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n            self._ptr += needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice ends with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n\\n        if (selfptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\n     *      end of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n        bool equal = true;\\n        if (selfptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    // Returns the memory address of the first byte of the first occurrence of\\n    // `needle` in `self`, or the first byte after `self` if not found.\\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr = selfptr;\\n        uint idx;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                uint end = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr >= end)\\n                        return selfptr + selflen;\\n                    ptr++;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr;\\n                    ptr += 1;\\n                }\\n            }\\n        }\\n        return selfptr + selflen;\\n    }\\n\\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr)\\n                        return selfptr;\\n                    ptr--;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\n     *      if `needle` is not found.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len -= ptr - self._ptr;\\n        self._ptr = ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain the part of the string from the start of\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\n     *      is not found, `self` is set to the empty slice.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len = ptr - self._ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and `token` to everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = self._ptr;\\n        token._len = ptr - self._ptr;\\n        if (ptr == self._ptr + self._len) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n            self._ptr = ptr + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and returning everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` up to the first occurrence of `delim`.\\n     */\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        split(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and returning everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` after the last occurrence of `delim`.\\n     */\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        rsplit(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return The number of occurrences of `needle` found in `self`.\\n     */\\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\n        while (ptr <= self._ptr + self._len) {\\n            cnt++;\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns True if `self` contains `needle`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return True if `needle` is found in `self`, false otherwise.\\n     */\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\n    }\\n\\n    /*\\n     * @dev Returns a newly allocated string containing the concatenation of\\n     *      `self` and `other`.\\n     * @param self The first slice to concatenate.\\n     * @param other The second slice to concatenate.\\n     * @return The concatenation of the two strings.\\n     */\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\n        string memory ret = new string(self._len + other._len);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n        memcpy(retptr, self._ptr, self._len);\\n        memcpy(retptr + self._len, other._ptr, other._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\n     *      newly allocated string.\\n     * @param self The delimiter to use.\\n     * @param parts A list of slices to join.\\n     * @return A newly allocated string containing all the slices in `parts`,\\n     *         joined with `self`.\\n     */\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\n        if (parts.length == 0)\\n            return \\\"\\\";\\n\\n        uint length = self._len * (parts.length - 1);\\n        for(uint i = 0; i < parts.length; i++)\\n            length += parts[i]._len;\\n\\n        string memory ret = new string(length);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n\\n        for(uint i = 0; i < parts.length; i++) {\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\n            retptr += parts[i]._len;\\n            if (i < parts.length - 1) {\\n                memcpy(retptr, self._ptr, self._len);\\n                retptr += self._len;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0x3743529f9337a8ba90fdc258b99e27565ea82ba793e7287a45696b3d562e0e87\"}},\"version\":1}",
  "bytecode": "0x6080604052604051620041a9380380620041a98339810160408190526200002691620005e2565b604051806040016040528060078152602001660426c6974706f760cc1b815250604051806040016040528060078152602001660424c4954504f560cc1b81525081600090805190602001906200007e92919062000476565b5080516200009490600190602084019062000476565b505050620000b1620000ab620003c560201b60201c565b620003c9565b620000c363c155531d60e01b6200041b565b600d80546001600160a01b0319166001600160a01b03831617905560408051808201825260058152641e39bb339f60d91b60208201529051600f90620001099062000675565b908152602001604051809103902090805190602001906200012c92919062000476565b506040518060e0016040528060a981526020016200406560a99139600f604051620001579062000660565b908152602001604051809103902090805190602001906200017a92919062000476565b506040518060c00160405280609b81526020016200410e609b9139600f604051620001a59062000634565b90815260200160405180910390209080519060200190620001c892919062000476565b506040518060e0016040528060a8815260200162003f3d60a89139600f604051620001f39062000612565b908152602001604051809103902090805190602001906200021692919062000476565b506040518060c00160405280608e815260200162003eaf608e9139600f60405162000241906200064e565b908152602001604051809103902090805190602001906200026492919062000476565b506040518060a001604052806080815260200162003fe560809139600f6040516200028f9062000625565b90815260200160405180910390209080519060200190620002b292919062000476565b506040518060c00160405280604051806040016040528060028152602001616f6760f01b81525081526020016040518060400160405280600981526020016863616d7062656c6c7360b81b81525081526020016040518060400160405280600e81526020016d32b632b1ba3934b196b1b430b4b960911b81525081526020016040518060400160405280600781526020016636b0b934b63cb760c91b8152508152602001604051806040016040528060068152602001656272696c6c6f60d01b81525081526020016040518060400160405280600381526020016262267760e81b8152508152506010906006620003ab92919062000505565b50620003bb4262093a80620006ba565b600e55506200071c565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160e01b03198082161415620004515760405162461bcd60e51b8152600401620004489062000683565b60405180910390fd5b6001600160e01b0319166000908152600b60205260409020805460ff19166001179055565b8280546200048490620006df565b90600052602060002090601f016020900481019282620004a85760008555620004f3565b82601f10620004c357805160ff1916838001178555620004f3565b82800160010185558215620004f3579182015b82811115620004f3578251825591602001919060010190620004d6565b506200050192915062000565565b5090565b82805482825590600052602060002090810192821562000557579160200282015b828111156200055757825180516200054691849160209091019062000476565b509160200191906001019062000526565b50620005019291506200057c565b5b8082111562000501576000815560010162000566565b80821115620005015760006200059382826200059d565b506001016200057c565b508054620005ab90620006df565b6000825580601f10620005bf5750620005df565b601f016020900490600052602060002090810190620005df919062000565565b50565b600060208284031215620005f4578081fd5b81516001600160a01b03811681146200060b578182fd5b9392505050565b6636b0b934b63cb760c91b815260070190565b6262267760e81b815260030190565b6d32b632b1ba3934b196b1b430b4b960911b8152600e0190565b656272696c6c6f60d01b815260060190565b6863616d7062656c6c7360b81b815260090190565b616f6760f01b815260020190565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b60008219821115620006da57634e487b7160e01b81526011600452602481fd5b500190565b600281046001821680620006f457607f821691505b602082108114156200071657634e487b7160e01b600052602260045260246000fd5b50919050565b613783806200072c6000396000f3fe6080604052600436106101d85760003560e01c80638da5cb5b11610102578063c155531d11610095578063f22998a811610064578063f22998a814610511578063f2fde38b14610531578063f61f6e0314610551578063fc194cf61461057e576101d8565b8063c155531d1461048e578063c87b56dd146104bc578063d9f7ce82146104dc578063e985e9c5146104f1576101d8565b8063a22cb465116100d1578063a22cb46514610424578063b2c7517214610444578063b88d4fde14610459578063c002d23d14610479576101d8565b80638da5cb5b146103c75780639143bafc146103dc57806395d89b41146103fc578063a13170e814610411576101d8565b80633472aaa01161017a57806350a1151d1161014957806350a1151d146103505780636352211e1461037257806370a0823114610392578063715018a6146103b2576101d8565b80633472aaa0146102e65780633ccfd60b146102fb57806342842e0e146103105780634f6ccce714610330576101d8565b8063095ea7b3116101b6578063095ea7b31461026257806318160ddd1461028457806323b872dd146102a65780632f745c59146102c6576101d8565b806301ffc9a7146101dd57806306fdde0314610213578063081812fc14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f83660046125ed565b61059e565b60405161020a9190612ed7565b60405180910390f35b34801561021f57600080fd5b506102286105c0565b60405161020a9190612ee2565b34801561024157600080fd5b506102556102503660046126f9565b610652565b60405161020a9190612e0d565b34801561026e57600080fd5b5061028261027d3660046125c4565b61069e565b005b34801561029057600080fd5b50610299610736565b60405161020a919061344b565b3480156102b257600080fd5b506102826102c13660046124d6565b61073c565b3480156102d257600080fd5b506102996102e13660046125c4565b610774565b3480156102f257600080fd5b506102996107c6565b34801561030757600080fd5b506102826107cc565b34801561031c57600080fd5b5061028261032b3660046124d6565b61083a565b34801561033c57600080fd5b5061029961034b3660046126f9565b610855565b34801561035c57600080fd5b506103656108b0565b60405161020a9190612e77565b34801561037e57600080fd5b5061025561038d3660046126f9565b610989565b34801561039e57600080fd5b506102996103ad36600461248a565b6109be565b3480156103be57600080fd5b50610282610a02565b3480156103d357600080fd5b50610255610a4d565b3480156103e857600080fd5b506102826103f7366004612711565b610a5c565b34801561040857600080fd5b50610228610b41565b61028261041f366004612711565b610b50565b34801561043057600080fd5b5061028261043f36600461258a565b610be6565b34801561045057600080fd5b50610299610cb4565b34801561046557600080fd5b50610282610474366004612511565b610cb9565b34801561048557600080fd5b50610299610cf2565b34801561049a57600080fd5b506104ae6104a9366004612793565b610cfd565b60405161020a929190612e5e565b3480156104c857600080fd5b506102286104d73660046126f9565b610d2d565b3480156104e857600080fd5b5061025561102e565b3480156104fd57600080fd5b506101fd61050c3660046124a4565b61103d565b34801561051d57600080fd5b5061028261052c366004612698565b61106b565b34801561053d57600080fd5b5061028261054c36600461248a565b611120565b34801561055d57600080fd5b5061057161056c3660046126f9565b61118e565b60405161020a91906133e9565b34801561058a57600080fd5b50610228610599366004612711565b61137b565b60006105a9826113bb565b806105b857506105b8826113e0565b90505b919050565b6060600080546105cf9061364b565b80601f01602080910402602001604051908101604052809291908181526020018280546105fb9061364b565b80156106485780601f1061061d57610100808354040283529160200191610648565b820191906000526020600020905b81548152906001019060200180831161062b57829003601f168201915b5050505050905090565b600061065d82611411565b6106825760405162461bcd60e51b81526004016106799061321e565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106a982610989565b9050806001600160a01b0316836001600160a01b031614156106dd5760405162461bcd60e51b8152600401610679906132e8565b806001600160a01b03166106ef61142e565b6001600160a01b0316148061070b575061070b8161050c61142e565b6107275760405162461bcd60e51b8152600401610679906130f9565b6107318383611432565b505050565b60085490565b61074d61074761142e565b826114a0565b6107695760405162461bcd60e51b815260040161067990613329565b61073183838361151d565b600061077f836109be565b821061079d5760405162461bcd60e51b815260040161067990612ef5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600e5481565b6107d461142e565b6001600160a01b03166107e5610a4d565b6001600160a01b03161461080b5760405162461bcd60e51b81526004016106799061326a565b60405133904780156108fc02916000818181858888f19350505050158015610837573d6000803e3d6000fd5b50565b61073183838360405180602001604052806000815250610cb9565b600061085f610736565b821061087d5760405162461bcd60e51b81526004016106799061337a565b6008828154811061089e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60606010805480602002602001604051908101604052809291908181526020016000905b828210156109805783829060005260206000200180546108f39061364b565b80601f016020809104026020016040519081016040528092919081815260200182805461091f9061364b565b801561096c5780601f106109415761010080835404028352916020019161096c565b820191906000526020600020905b81548152906001019060200180831161094f57829003601f168201915b5050505050815260200190600101906108d4565b50505050905090565b6000818152600260205260408120546001600160a01b0316806105b85760405162461bcd60e51b8152600401610679906131a0565b60006001600160a01b0382166109e65760405162461bcd60e51b815260040161067990613156565b506001600160a01b031660009081526003602052604090205490565b610a0a61142e565b6001600160a01b0316610a1b610a4d565b6001600160a01b031614610a415760405162461bcd60e51b81526004016106799061326a565b610a4b600061164a565b565b600a546001600160a01b031690565b610a6584610989565b6001600160a01b0316336001600160a01b031614610a955760405162461bcd60e51b8152600401610679906133c6565b604080516080810182526000868152600c60205291909120548190610abb9060016134b2565b81526020808201869052604080830186905260609092018490526000878152600c825291909120825181558282015180519192610b009260018501929091019061233b565b5060408201518051610b1c91600284019160209091019061233b565b5060608201518051610b3891600384019160209091019061233b565b50505050505050565b6060600180546105cf9061364b565b604080516080810182526000808252602080830187815283850187905260608401869052888352600c8252939091208251815592518051929392610b9a926001850192019061233b565b5060408201518051610bb691600284019160209091019061233b565b5060608201518051610bd291600384019160209091019061233b565b50905050610be0338561169c565b50505050565b610bee61142e565b6001600160a01b0316826001600160a01b03161415610c1f5760405162461bcd60e51b815260040161067990613053565b8060056000610c2c61142e565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610c7061142e565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ca89190612ed7565b60405180910390a35050565b600a81565b610cca610cc461142e565b836114a0565b610ce65760405162461bcd60e51b815260040161067990613329565b610be0848484846116ba565b66470de4df82000081565b6000806064610d0d600a876135e9565b610d1791906134ca565b9050610d21610a4d565b91505b94509492505050565b6060610d3882611411565b610d545760405162461bcd60e51b8152600401610679906130d6565b6000600c600084815260200190815260200160002060405180608001604052908160008201548152602001600182018054610d8e9061364b565b80601f0160208091040260200160405190810160405280929190818152602001828054610dba9061364b565b8015610e075780601f10610ddc57610100808354040283529160200191610e07565b820191906000526020600020905b815481529060010190602001808311610dea57829003601f168201915b50505050508152602001600282018054610e209061364b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4c9061364b565b8015610e995780601f10610e6e57610100808354040283529160200191610e99565b820191906000526020600020905b815481529060010190602001808311610e7c57829003601f168201915b50505050508152602001600382018054610eb29061364b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ede9061364b565b8015610f2b5780601f10610f0057610100808354040283529160200191610f2b565b820191906000526020600020905b815481529060010190602001808311610f0e57829003601f168201915b505050919092525050600d546040516338c9319960e21b8152929350611007926001600160a01b03909116915063e324c66490610f6c90879060040161344b565b60006040518083038186803b158015610f8457600080fd5b505afa158015610f98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fc09190810190612625565b610fd88584602001518560400151866060015161137b565b610fe1846116ed565b604051602001610ff39392919061299c565b604051602081830303815290604052611734565b6040516020016110179190612ca3565b604051602081830303815290604052915050919050565b600d546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61107361142e565b6001600160a01b0316611084610a4d565b6001600160a01b0316146110aa5760405162461bcd60e51b81526004016106799061326a565b6010805460018101825560009190915282516110ed917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720190602085019061233b565b5080600f836040516110ff9190612980565b9081526020016040518091039020908051906020019061073192919061233b565b61112861142e565b6001600160a01b0316611139610a4d565b6001600160a01b03161461115f5760405162461bcd60e51b81526004016106799061326a565b6001600160a01b0381166111855760405162461bcd60e51b815260040161067990612f92565b6108378161164a565b6111966123bf565b600c6000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546111ce9061364b565b80601f01602080910402602001604051908101604052809291908181526020018280546111fa9061364b565b80156112475780601f1061121c57610100808354040283529160200191611247565b820191906000526020600020905b81548152906001019060200180831161122a57829003601f168201915b505050505081526020016002820180546112609061364b565b80601f016020809104026020016040519081016040528092919081815260200182805461128c9061364b565b80156112d95780601f106112ae576101008083540402835291602001916112d9565b820191906000526020600020905b8154815290600101906020018083116112bc57829003601f168201915b505050505081526020016003820180546112f29061364b565b80601f016020809104026020016040519081016040528092919081815260200182805461131e9061364b565b801561136b5780601f106113405761010080835404028352916020019161136b565b820191906000526020600020905b81548152906001019060200180831161134e57829003601f168201915b5050505050815250509050919050565b606061139161138c868686866118a8565b611734565b6040516020016113a19190612dc8565b60405160208183030381529060405290505b949350505050565b60006001600160e01b0319821663780e9d6360e01b14806105b857506105b882611a2b565b60006113eb826113bb565b806105b85750506001600160e01b0319166000908152600b602052604090205460ff1690565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061146782610989565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006114ab82611411565b6114c75760405162461bcd60e51b81526004016106799061308a565b60006114d283610989565b9050806001600160a01b0316846001600160a01b0316148061150d5750836001600160a01b031661150284610652565b6001600160a01b0316145b806113b357506113b3818561103d565b826001600160a01b031661153082610989565b6001600160a01b0316146115565760405162461bcd60e51b81526004016106799061329f565b6001600160a01b03821661157c5760405162461bcd60e51b81526004016106799061300f565b611587838383611a6b565b611592600082611432565b6001600160a01b03831660009081526003602052604081208054600192906115bb908490613608565b90915550506001600160a01b03821660009081526003602052604081208054600192906115e99084906134b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6116b6828260405180602001604052806000815250611af4565b5050565b6116c584848461151d565b6116d184848484611b27565b610be05760405162461bcd60e51b815260040161067990612f40565b60606116fc8260000151611c3f565b82602001518360400151846060015160405160200161171e9493929190612ce8565b6040516020818303038152906040529050919050565b8051606090806117545750506040805160208101909152600081526105bb565b600060036117638360026134b2565b61176d91906134ca565b6117789060046135e9565b905060006117878260206134b2565b67ffffffffffffffff8111156117ad57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117d7576020820181803683370190505b509050600060405180606001604052806040815260200161370e604091399050600181016020830160005b86811015611863576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101611802565b50600386066001811461187d576002811461188e5761189a565b613d3d60f01b60011983015261189a565b603d60f81b6000198301525b505050918152949350505050565b60408051808201825260148152733b34b2bba137bc1e91181018101999101999111f60611b6020820152600d54915163a78d070f60e01b8152606092600091611962916001600160a01b03169063a78d070f90611909908b9060040161344b565b60006040518083038186803b15801561192157600080fd5b505afa158015611935573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261195d9190810190612625565b611d5a565b9050600061197961197284611d5a565b8390611d7f565b905061198482611d99565b600f886040516119949190612980565b90815260200160405180910390206119ab84611d99565b600f896040516119bb9190612980565b90815260200160405180910390206119d286611d99565b600f8a6040516119e29190612980565b90815260200160405180910390206119f988611d99565b604051602001611a0f9796959493929190612b09565b6040516020818303038152906040529350505050949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611a5c57506001600160e01b03198216635b5e139f60e01b145b806105b857506105b882611e10565b611a76838383610731565b6001600160a01b038316611a9257611a8d81611e29565b611ab5565b816001600160a01b0316836001600160a01b031614611ab557611ab58382611e6d565b6001600160a01b038216611ad157611acc81611f0a565b610731565b826001600160a01b0316826001600160a01b031614610731576107318282611fe3565b611afe8383612027565b611b0b6000848484611b27565b6107315760405162461bcd60e51b815260040161067990612f40565b6000611b3b846001600160a01b0316612106565b15611c3757836001600160a01b031663150b7a02611b5761142e565b8786866040518563ffffffff1660e01b8152600401611b799493929190612e21565b602060405180830381600087803b158015611b9357600080fd5b505af1925050508015611bc3575060408051601f3d908101601f19168201909252611bc091810190612609565b60015b611c1d573d808015611bf1576040519150601f19603f3d011682016040523d82523d6000602084013e611bf6565b606091505b508051611c155760405162461bcd60e51b815260040161067990612f40565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113b3565b5060016113b3565b606081611c6457506040805180820190915260018152600360fc1b60208201526105bb565b8160005b8115611c8e5780611c7881613686565b9150611c879050600a836134ca565b9150611c68565b60008167ffffffffffffffff811115611cb757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ce1576020820181803683370190505b5090505b84156113b357611cf6600183613608565b9150611d03600a866136a1565b611d0e9060306134b2565b60f81b818381518110611d3157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d53600a866134ca565b9450611ce5565b611d626123e7565b506040805180820190915281518152602082810190820152919050565b611d876123e7565b611d9283838361210c565b5092915050565b60606000826000015167ffffffffffffffff811115611dc857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611df2576020820181803683370190505b5090506000602082019050611d9281856020015186600001516121af565b6001600160e01b031981166301ffc9a760e01b14919050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b60006001611e7a846109be565b611e849190613608565b600083815260076020526040902054909150808214611ed7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611f1c90600190613608565b60008381526009602052604081205460088054939450909284908110611f5257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110611f8157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611fc757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611fee836109be565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661204d5760405162461bcd60e51b8152600401610679906131e9565b61205681611411565b156120735760405162461bcd60e51b815260040161067990612fd8565b61207f60008383611a6b565b6001600160a01b03821660009081526003602052604081208054600192906120a89084906134b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b6121146123e7565b60006121328560000151866020015186600001518760200151612220565b60208087018051918601919091525190915061214e9082613608565b83528451602086015161216191906134b2565b81141561217157600085526121a3565b8351835161217f91906134b2565b8551869061218e908390613608565b905250835161219d90826134b2565b60208601525b829150505b9392505050565b602081106121e757815183526121c66020846134b2565b92506121d36020836134b2565b91506121e0602082613608565b90506121af565b600060016121f6836020613608565b6122029061010061351b565b61220c9190613608565b925184518416931916929092179092525050565b6000838186851161232657602085116122d45760006001612242876020613608565b61224d9060086135e9565b61225890600261351b565b6122629190613608565b85519019915081166000876122778b8b6134b2565b6122819190613608565b855190915083165b8281146122c6578186106122ae576122a18b8b6134b2565b96505050505050506113b3565b856122b881613686565b965050838651169050612289565b8596505050505050506113b3565b508383206000905b6122e68689613608565b8211612324578583208181141561230357839450505050506113b3565b61230e6001856134b2565b935050818061231c90613686565b9250506122dc565b505b61233087876134b2565b979650505050505050565b8280546123479061364b565b90600052602060002090601f01602090048101928261236957600085556123af565b82601f1061238257805160ff19168380011785556123af565b828001600101855582156123af579182015b828111156123af578251825591602001919060010190612394565b506123bb929150612401565b5090565b6040518060800160405280600081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001600081525090565b5b808211156123bb5760008155600101612402565b60006124296124248461347e565b613454565b905082815283838301111561243d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146105bb57600080fd5b600082601f83011261247b578081fd5b6121a883833560208501612416565b60006020828403121561249b578081fd5b6121a882612454565b600080604083850312156124b6578081fd5b6124bf83612454565b91506124cd60208401612454565b90509250929050565b6000806000606084860312156124ea578081fd5b6124f384612454565b925061250160208501612454565b9150604084013590509250925092565b60008060008060808587031215612526578081fd5b61252f85612454565b935061253d60208601612454565b925060408501359150606085013567ffffffffffffffff81111561255f578182fd5b8501601f8101871361256f578182fd5b61257e87823560208401612416565b91505092959194509250565b6000806040838503121561259c578182fd5b6125a583612454565b9150602083013580151581146125b9578182fd5b809150509250929050565b600080604083850312156125d6578182fd5b6125df83612454565b946020939093013593505050565b6000602082840312156125fe578081fd5b81356121a8816136f7565b60006020828403121561261a578081fd5b81516121a8816136f7565b600060208284031215612636578081fd5b815167ffffffffffffffff81111561264c578182fd5b8201601f8101841361265c578182fd5b805161266a6124248261347e565b81815285602083850101111561267e578384fd5b61268f82602083016020860161361f565b95945050505050565b600080604083850312156126aa578182fd5b823567ffffffffffffffff808211156126c1578384fd5b6126cd8683870161246b565b935060208501359150808211156126e2578283fd5b506126ef8582860161246b565b9150509250929050565b60006020828403121561270a578081fd5b5035919050565b60008060008060808587031215612726578081fd5b84359350602085013567ffffffffffffffff80821115612744578283fd5b6127508883890161246b565b94506040870135915080821115612765578283fd5b6127718883890161246b565b93506060870135915080821115612786578283fd5b5061257e8782880161246b565b600080600080606085870312156127a8578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156127cd578384fd5b818701915087601f8301126127e0578384fd5b8135818111156127ee578485fd5b8860208285010111156127ff578485fd5b95989497505060200194505050565b6000815180845261282681602086016020860161361f565b601f01601f19169290920160200192915050565b6000815161284c81856020860161361f565b9290920192915050565b80546000906002810460018083168061287057607f831692505b602080841082141561289057634e487b7160e01b86526022600452602486fd5b8180156128a457600181146128b5576128e2565b60ff198616895284890196506128e2565b6128be886134a6565b60005b868110156128da5781548b8201529085019083016128c1565b505084890196505b50505050505092915050565b6b1e17b9bb339f1e17b9bb339f60a11b8152600c0190565b7f3c2f7376673e3c7376672076696577426f783d2230203020333220333222207781527f696474683d22333222206865696768743d2233322220783d2233322220793d226020820152631999111f60e11b604082015260440190565b62227d7d60e81b815260030190565b6201116160ed1b815260030190565b6000825161299281846020870161361f565b9190910192915050565b7003d913730b6b2911d11213634ba3837b81607d1b815283516000906129c981601185016020890161361f565b7f222c20226465736372697074696f6e223a22426c6974706f707320617265206f6011918401918201527f6e636861696e20426c69746d61702064657269766174697665732e20546f206360318201527f6f6e7374727563742074686520617274776f726b2c20746865206f726967696e60518201527f616c20426c69746d6170207769746820636f72726573706f6e64696e6720746f60718201527f6b656e20494420697320666574636865642c20636f6c6c6167656420616e642060918201527f66696c746572656420746f2072657475726e2061206d6f646966696564206f6e60b18201527f636861696e205356472e222c2022696d616765223a202200000000000000000060d18201528451612aea8160e884016020890161361f565b612330612b04612afe60e884860101612971565b8761283a565b612962565b60007f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323082527f30302f737667222076696577426f783d22302030203634203634223e3c73766760208301527f2076696577426f783d22302030203332203332222077696474683d223332222060408301526b3432b4b3b43a1e911999111f60a11b60608301528851612ba281606c850160208d0161361f565b7f3c7376672076696577426f783d22302030203332203332222077696474683d22606c918401918201527f333222206865696768743d2233322220783d223332223e000000000000000000608c820152612bff60a382018a612856565b90508751612c11818360208c0161361f565b7f3c2f7376673e3c7376672076696577426f783d2230203020333220333222207791019081527f696474683d22333222206865696768743d2233322220793d223332223e0000006020820152612c95612c90612c8a612c84612c7f612c79603d87018d612856565b8b61283a565b612906565b88612856565b8661283a565b6128ee565b9a9950505050505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251612cdb81601d85016020870161361f565b91909101601d0192915050565b60007f2270726f70657274696573223a207b20227265766973696f6e73223a2022000082528551612d2081601e850160208a0161361f565b70111610112a37b8102934b3b43a111d101160791b601e918401918201528551612d5181602f840160208a0161361f565b72111610112137ba3a37b6902632b33a111d101160691b602f92909101918201528451612d8581604284016020890161361f565b73111610112137ba3a37b6902934b3b43a111d101160611b604292909101918201528351612dba81605684016020880161361f565b016056019695505050505050565b60007f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000082528251612e0081601a85016020870161361f565b91909101601a0192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612e549083018461280e565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612eca57603f19888603018452612eb885835161280e565b94509285019290850190600101612e9c565b5092979650505050505050565b901515815260200190565b6000602082526121a8602083018461280e565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260099082015268109c0e9d154e8d0c0d60ba1b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526009908201526842703a75463a34303360b81b604082015260600190565b6000602082528251602083015260208301516080604084015261340f60a084018261280e565b90506040840151601f198085840301606086015261342d838361280e565b925060608601519150808584030160808601525061268f828261280e565b90815260200190565b60405181810167ffffffffffffffff81118282101715613476576134766136e1565b604052919050565b600067ffffffffffffffff821115613498576134986136e1565b50601f01601f191660200190565b60009081526020902090565b600082198211156134c5576134c56136b5565b500190565b6000826134d9576134d96136cb565b500490565b80825b60018086116134f05750610d24565b818704821115613502576135026136b5565b8086161561350f57918102915b9490941c9380026134e1565b60006121a86000198484600082613534575060016121a8565b81613541575060006121a8565b816001811461355757600281146135615761358e565b60019150506121a8565b60ff841115613572576135726136b5565b6001841b915084821115613588576135886136b5565b506121a8565b5060208310610133831016604e8410600b84101617156135c1575081810a838111156135bc576135bc6136b5565b6121a8565b6135ce84848460016134de565b8086048211156135e0576135e06136b5565b02949350505050565b6000816000190483118215151615613603576136036136b5565b500290565b60008282101561361a5761361a6136b5565b500390565b60005b8381101561363a578181015183820152602001613622565b83811115610be05750506000910152565b60028104600182168061365f57607f821691505b6020821081141561368057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561369a5761369a6136b5565b5060010190565b6000826136b0576136b06136cb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461083757600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205af809cbc6e17112f0065cad965875e341fc0c4204accc4987e095e77f38fbb764736f6c634300080000333c66696c7465722069643d226272696c6c6f223e3c6665436f6c6f724d617472697820747970653d226d6174726978222076616c7565733d223020312e30203020302030203020312e30203020302030203020302e362031203020302030203020302031203020222f3e3c2f66696c7465723e3c7376672066696c7465723d2275726c28236272696c6c6f29223e3c66696c7465722069643d226d6172696c796e223e3c6665436f6c6f724d617472697820747970653d226d6174726978222076616c7565733d22312030203020312e37202d312e3620302031203020302e3020302e33202d302e3720302031203020302e35203020302030203120302e32223e3c2f6665436f6c6f724d61747269783e3c2f66696c7465723e3c7376672066696c7465723d2275726c28236d6172696c796e29223e3c66696c7465722069643d226277223e3c6665436f6c6f724d617472697820747970653d226d6174726978222076616c7565733d2230203120302030203020302031203020302030203020312030203020302030203120302031203020222f3e3c2f66696c7465723e3c7376672066696c7465723d2275726c2823627729223e3c66696c7465722069643d2263616d7062656c6c73223e3c6665436f6c6f724d617472697820747970653d226d6174726978222076616c7565733d22312030203020312e39202d322e3220302031203020302e3020302e33203020302031203020302e35203020302030203120302e32223e3c2f6665436f6c6f724d61747269783e3c2f66696c7465723e3c7376672066696c7465723d2275726c282363616d7062656c6c7329223e3c66696c7465722069643d226563223e3c6665436f6c6f724d617472697820747970653d226d6174726978222076616c7565733d22312030203020302030202d302e3420312e33202d302e3420302e32202d302e312030203020312030203020302030203020312030223e3c2f6665436f6c6f724d61747269783e3c2f66696c7465723e3c7376672066696c7465723d2275726c2823656329223e",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80638da5cb5b11610102578063c155531d11610095578063f22998a811610064578063f22998a814610511578063f2fde38b14610531578063f61f6e0314610551578063fc194cf61461057e576101d8565b8063c155531d1461048e578063c87b56dd146104bc578063d9f7ce82146104dc578063e985e9c5146104f1576101d8565b8063a22cb465116100d1578063a22cb46514610424578063b2c7517214610444578063b88d4fde14610459578063c002d23d14610479576101d8565b80638da5cb5b146103c75780639143bafc146103dc57806395d89b41146103fc578063a13170e814610411576101d8565b80633472aaa01161017a57806350a1151d1161014957806350a1151d146103505780636352211e1461037257806370a0823114610392578063715018a6146103b2576101d8565b80633472aaa0146102e65780633ccfd60b146102fb57806342842e0e146103105780634f6ccce714610330576101d8565b8063095ea7b3116101b6578063095ea7b31461026257806318160ddd1461028457806323b872dd146102a65780632f745c59146102c6576101d8565b806301ffc9a7146101dd57806306fdde0314610213578063081812fc14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f83660046125ed565b61059e565b60405161020a9190612ed7565b60405180910390f35b34801561021f57600080fd5b506102286105c0565b60405161020a9190612ee2565b34801561024157600080fd5b506102556102503660046126f9565b610652565b60405161020a9190612e0d565b34801561026e57600080fd5b5061028261027d3660046125c4565b61069e565b005b34801561029057600080fd5b50610299610736565b60405161020a919061344b565b3480156102b257600080fd5b506102826102c13660046124d6565b61073c565b3480156102d257600080fd5b506102996102e13660046125c4565b610774565b3480156102f257600080fd5b506102996107c6565b34801561030757600080fd5b506102826107cc565b34801561031c57600080fd5b5061028261032b3660046124d6565b61083a565b34801561033c57600080fd5b5061029961034b3660046126f9565b610855565b34801561035c57600080fd5b506103656108b0565b60405161020a9190612e77565b34801561037e57600080fd5b5061025561038d3660046126f9565b610989565b34801561039e57600080fd5b506102996103ad36600461248a565b6109be565b3480156103be57600080fd5b50610282610a02565b3480156103d357600080fd5b50610255610a4d565b3480156103e857600080fd5b506102826103f7366004612711565b610a5c565b34801561040857600080fd5b50610228610b41565b61028261041f366004612711565b610b50565b34801561043057600080fd5b5061028261043f36600461258a565b610be6565b34801561045057600080fd5b50610299610cb4565b34801561046557600080fd5b50610282610474366004612511565b610cb9565b34801561048557600080fd5b50610299610cf2565b34801561049a57600080fd5b506104ae6104a9366004612793565b610cfd565b60405161020a929190612e5e565b3480156104c857600080fd5b506102286104d73660046126f9565b610d2d565b3480156104e857600080fd5b5061025561102e565b3480156104fd57600080fd5b506101fd61050c3660046124a4565b61103d565b34801561051d57600080fd5b5061028261052c366004612698565b61106b565b34801561053d57600080fd5b5061028261054c36600461248a565b611120565b34801561055d57600080fd5b5061057161056c3660046126f9565b61118e565b60405161020a91906133e9565b34801561058a57600080fd5b50610228610599366004612711565b61137b565b60006105a9826113bb565b806105b857506105b8826113e0565b90505b919050565b6060600080546105cf9061364b565b80601f01602080910402602001604051908101604052809291908181526020018280546105fb9061364b565b80156106485780601f1061061d57610100808354040283529160200191610648565b820191906000526020600020905b81548152906001019060200180831161062b57829003601f168201915b5050505050905090565b600061065d82611411565b6106825760405162461bcd60e51b81526004016106799061321e565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106a982610989565b9050806001600160a01b0316836001600160a01b031614156106dd5760405162461bcd60e51b8152600401610679906132e8565b806001600160a01b03166106ef61142e565b6001600160a01b0316148061070b575061070b8161050c61142e565b6107275760405162461bcd60e51b8152600401610679906130f9565b6107318383611432565b505050565b60085490565b61074d61074761142e565b826114a0565b6107695760405162461bcd60e51b815260040161067990613329565b61073183838361151d565b600061077f836109be565b821061079d5760405162461bcd60e51b815260040161067990612ef5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600e5481565b6107d461142e565b6001600160a01b03166107e5610a4d565b6001600160a01b03161461080b5760405162461bcd60e51b81526004016106799061326a565b60405133904780156108fc02916000818181858888f19350505050158015610837573d6000803e3d6000fd5b50565b61073183838360405180602001604052806000815250610cb9565b600061085f610736565b821061087d5760405162461bcd60e51b81526004016106799061337a565b6008828154811061089e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60606010805480602002602001604051908101604052809291908181526020016000905b828210156109805783829060005260206000200180546108f39061364b565b80601f016020809104026020016040519081016040528092919081815260200182805461091f9061364b565b801561096c5780601f106109415761010080835404028352916020019161096c565b820191906000526020600020905b81548152906001019060200180831161094f57829003601f168201915b5050505050815260200190600101906108d4565b50505050905090565b6000818152600260205260408120546001600160a01b0316806105b85760405162461bcd60e51b8152600401610679906131a0565b60006001600160a01b0382166109e65760405162461bcd60e51b815260040161067990613156565b506001600160a01b031660009081526003602052604090205490565b610a0a61142e565b6001600160a01b0316610a1b610a4d565b6001600160a01b031614610a415760405162461bcd60e51b81526004016106799061326a565b610a4b600061164a565b565b600a546001600160a01b031690565b610a6584610989565b6001600160a01b0316336001600160a01b031614610a955760405162461bcd60e51b8152600401610679906133c6565b604080516080810182526000868152600c60205291909120548190610abb9060016134b2565b81526020808201869052604080830186905260609092018490526000878152600c825291909120825181558282015180519192610b009260018501929091019061233b565b5060408201518051610b1c91600284019160209091019061233b565b5060608201518051610b3891600384019160209091019061233b565b50505050505050565b6060600180546105cf9061364b565b604080516080810182526000808252602080830187815283850187905260608401869052888352600c8252939091208251815592518051929392610b9a926001850192019061233b565b5060408201518051610bb691600284019160209091019061233b565b5060608201518051610bd291600384019160209091019061233b565b50905050610be0338561169c565b50505050565b610bee61142e565b6001600160a01b0316826001600160a01b03161415610c1f5760405162461bcd60e51b815260040161067990613053565b8060056000610c2c61142e565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610c7061142e565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ca89190612ed7565b60405180910390a35050565b600a81565b610cca610cc461142e565b836114a0565b610ce65760405162461bcd60e51b815260040161067990613329565b610be0848484846116ba565b66470de4df82000081565b6000806064610d0d600a876135e9565b610d1791906134ca565b9050610d21610a4d565b91505b94509492505050565b6060610d3882611411565b610d545760405162461bcd60e51b8152600401610679906130d6565b6000600c600084815260200190815260200160002060405180608001604052908160008201548152602001600182018054610d8e9061364b565b80601f0160208091040260200160405190810160405280929190818152602001828054610dba9061364b565b8015610e075780601f10610ddc57610100808354040283529160200191610e07565b820191906000526020600020905b815481529060010190602001808311610dea57829003601f168201915b50505050508152602001600282018054610e209061364b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4c9061364b565b8015610e995780601f10610e6e57610100808354040283529160200191610e99565b820191906000526020600020905b815481529060010190602001808311610e7c57829003601f168201915b50505050508152602001600382018054610eb29061364b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ede9061364b565b8015610f2b5780601f10610f0057610100808354040283529160200191610f2b565b820191906000526020600020905b815481529060010190602001808311610f0e57829003601f168201915b505050919092525050600d546040516338c9319960e21b8152929350611007926001600160a01b03909116915063e324c66490610f6c90879060040161344b565b60006040518083038186803b158015610f8457600080fd5b505afa158015610f98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fc09190810190612625565b610fd88584602001518560400151866060015161137b565b610fe1846116ed565b604051602001610ff39392919061299c565b604051602081830303815290604052611734565b6040516020016110179190612ca3565b604051602081830303815290604052915050919050565b600d546001600160a01b031681565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61107361142e565b6001600160a01b0316611084610a4d565b6001600160a01b0316146110aa5760405162461bcd60e51b81526004016106799061326a565b6010805460018101825560009190915282516110ed917f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720190602085019061233b565b5080600f836040516110ff9190612980565b9081526020016040518091039020908051906020019061073192919061233b565b61112861142e565b6001600160a01b0316611139610a4d565b6001600160a01b03161461115f5760405162461bcd60e51b81526004016106799061326a565b6001600160a01b0381166111855760405162461bcd60e51b815260040161067990612f92565b6108378161164a565b6111966123bf565b600c6000838152602001908152602001600020604051806080016040529081600082015481526020016001820180546111ce9061364b565b80601f01602080910402602001604051908101604052809291908181526020018280546111fa9061364b565b80156112475780601f1061121c57610100808354040283529160200191611247565b820191906000526020600020905b81548152906001019060200180831161122a57829003601f168201915b505050505081526020016002820180546112609061364b565b80601f016020809104026020016040519081016040528092919081815260200182805461128c9061364b565b80156112d95780601f106112ae576101008083540402835291602001916112d9565b820191906000526020600020905b8154815290600101906020018083116112bc57829003601f168201915b505050505081526020016003820180546112f29061364b565b80601f016020809104026020016040519081016040528092919081815260200182805461131e9061364b565b801561136b5780601f106113405761010080835404028352916020019161136b565b820191906000526020600020905b81548152906001019060200180831161134e57829003601f168201915b5050505050815250509050919050565b606061139161138c868686866118a8565b611734565b6040516020016113a19190612dc8565b60405160208183030381529060405290505b949350505050565b60006001600160e01b0319821663780e9d6360e01b14806105b857506105b882611a2b565b60006113eb826113bb565b806105b85750506001600160e01b0319166000908152600b602052604090205460ff1690565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061146782610989565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006114ab82611411565b6114c75760405162461bcd60e51b81526004016106799061308a565b60006114d283610989565b9050806001600160a01b0316846001600160a01b0316148061150d5750836001600160a01b031661150284610652565b6001600160a01b0316145b806113b357506113b3818561103d565b826001600160a01b031661153082610989565b6001600160a01b0316146115565760405162461bcd60e51b81526004016106799061329f565b6001600160a01b03821661157c5760405162461bcd60e51b81526004016106799061300f565b611587838383611a6b565b611592600082611432565b6001600160a01b03831660009081526003602052604081208054600192906115bb908490613608565b90915550506001600160a01b03821660009081526003602052604081208054600192906115e99084906134b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6116b6828260405180602001604052806000815250611af4565b5050565b6116c584848461151d565b6116d184848484611b27565b610be05760405162461bcd60e51b815260040161067990612f40565b60606116fc8260000151611c3f565b82602001518360400151846060015160405160200161171e9493929190612ce8565b6040516020818303038152906040529050919050565b8051606090806117545750506040805160208101909152600081526105bb565b600060036117638360026134b2565b61176d91906134ca565b6117789060046135e9565b905060006117878260206134b2565b67ffffffffffffffff8111156117ad57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117d7576020820181803683370190505b509050600060405180606001604052806040815260200161370e604091399050600181016020830160005b86811015611863576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101611802565b50600386066001811461187d576002811461188e5761189a565b613d3d60f01b60011983015261189a565b603d60f81b6000198301525b505050918152949350505050565b60408051808201825260148152733b34b2bba137bc1e91181018101999101999111f60611b6020820152600d54915163a78d070f60e01b8152606092600091611962916001600160a01b03169063a78d070f90611909908b9060040161344b565b60006040518083038186803b15801561192157600080fd5b505afa158015611935573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261195d9190810190612625565b611d5a565b9050600061197961197284611d5a565b8390611d7f565b905061198482611d99565b600f886040516119949190612980565b90815260200160405180910390206119ab84611d99565b600f896040516119bb9190612980565b90815260200160405180910390206119d286611d99565b600f8a6040516119e29190612980565b90815260200160405180910390206119f988611d99565b604051602001611a0f9796959493929190612b09565b6040516020818303038152906040529350505050949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611a5c57506001600160e01b03198216635b5e139f60e01b145b806105b857506105b882611e10565b611a76838383610731565b6001600160a01b038316611a9257611a8d81611e29565b611ab5565b816001600160a01b0316836001600160a01b031614611ab557611ab58382611e6d565b6001600160a01b038216611ad157611acc81611f0a565b610731565b826001600160a01b0316826001600160a01b031614610731576107318282611fe3565b611afe8383612027565b611b0b6000848484611b27565b6107315760405162461bcd60e51b815260040161067990612f40565b6000611b3b846001600160a01b0316612106565b15611c3757836001600160a01b031663150b7a02611b5761142e565b8786866040518563ffffffff1660e01b8152600401611b799493929190612e21565b602060405180830381600087803b158015611b9357600080fd5b505af1925050508015611bc3575060408051601f3d908101601f19168201909252611bc091810190612609565b60015b611c1d573d808015611bf1576040519150601f19603f3d011682016040523d82523d6000602084013e611bf6565b606091505b508051611c155760405162461bcd60e51b815260040161067990612f40565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113b3565b5060016113b3565b606081611c6457506040805180820190915260018152600360fc1b60208201526105bb565b8160005b8115611c8e5780611c7881613686565b9150611c879050600a836134ca565b9150611c68565b60008167ffffffffffffffff811115611cb757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ce1576020820181803683370190505b5090505b84156113b357611cf6600183613608565b9150611d03600a866136a1565b611d0e9060306134b2565b60f81b818381518110611d3157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d53600a866134ca565b9450611ce5565b611d626123e7565b506040805180820190915281518152602082810190820152919050565b611d876123e7565b611d9283838361210c565b5092915050565b60606000826000015167ffffffffffffffff811115611dc857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611df2576020820181803683370190505b5090506000602082019050611d9281856020015186600001516121af565b6001600160e01b031981166301ffc9a760e01b14919050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b60006001611e7a846109be565b611e849190613608565b600083815260076020526040902054909150808214611ed7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611f1c90600190613608565b60008381526009602052604081205460088054939450909284908110611f5257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110611f8157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611fc757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611fee836109be565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661204d5760405162461bcd60e51b8152600401610679906131e9565b61205681611411565b156120735760405162461bcd60e51b815260040161067990612fd8565b61207f60008383611a6b565b6001600160a01b03821660009081526003602052604081208054600192906120a89084906134b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b6121146123e7565b60006121328560000151866020015186600001518760200151612220565b60208087018051918601919091525190915061214e9082613608565b83528451602086015161216191906134b2565b81141561217157600085526121a3565b8351835161217f91906134b2565b8551869061218e908390613608565b905250835161219d90826134b2565b60208601525b829150505b9392505050565b602081106121e757815183526121c66020846134b2565b92506121d36020836134b2565b91506121e0602082613608565b90506121af565b600060016121f6836020613608565b6122029061010061351b565b61220c9190613608565b925184518416931916929092179092525050565b6000838186851161232657602085116122d45760006001612242876020613608565b61224d9060086135e9565b61225890600261351b565b6122629190613608565b85519019915081166000876122778b8b6134b2565b6122819190613608565b855190915083165b8281146122c6578186106122ae576122a18b8b6134b2565b96505050505050506113b3565b856122b881613686565b965050838651169050612289565b8596505050505050506113b3565b508383206000905b6122e68689613608565b8211612324578583208181141561230357839450505050506113b3565b61230e6001856134b2565b935050818061231c90613686565b9250506122dc565b505b61233087876134b2565b979650505050505050565b8280546123479061364b565b90600052602060002090601f01602090048101928261236957600085556123af565b82601f1061238257805160ff19168380011785556123af565b828001600101855582156123af579182015b828111156123af578251825591602001919060010190612394565b506123bb929150612401565b5090565b6040518060800160405280600081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001600081525090565b5b808211156123bb5760008155600101612402565b60006124296124248461347e565b613454565b905082815283838301111561243d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146105bb57600080fd5b600082601f83011261247b578081fd5b6121a883833560208501612416565b60006020828403121561249b578081fd5b6121a882612454565b600080604083850312156124b6578081fd5b6124bf83612454565b91506124cd60208401612454565b90509250929050565b6000806000606084860312156124ea578081fd5b6124f384612454565b925061250160208501612454565b9150604084013590509250925092565b60008060008060808587031215612526578081fd5b61252f85612454565b935061253d60208601612454565b925060408501359150606085013567ffffffffffffffff81111561255f578182fd5b8501601f8101871361256f578182fd5b61257e87823560208401612416565b91505092959194509250565b6000806040838503121561259c578182fd5b6125a583612454565b9150602083013580151581146125b9578182fd5b809150509250929050565b600080604083850312156125d6578182fd5b6125df83612454565b946020939093013593505050565b6000602082840312156125fe578081fd5b81356121a8816136f7565b60006020828403121561261a578081fd5b81516121a8816136f7565b600060208284031215612636578081fd5b815167ffffffffffffffff81111561264c578182fd5b8201601f8101841361265c578182fd5b805161266a6124248261347e565b81815285602083850101111561267e578384fd5b61268f82602083016020860161361f565b95945050505050565b600080604083850312156126aa578182fd5b823567ffffffffffffffff808211156126c1578384fd5b6126cd8683870161246b565b935060208501359150808211156126e2578283fd5b506126ef8582860161246b565b9150509250929050565b60006020828403121561270a578081fd5b5035919050565b60008060008060808587031215612726578081fd5b84359350602085013567ffffffffffffffff80821115612744578283fd5b6127508883890161246b565b94506040870135915080821115612765578283fd5b6127718883890161246b565b93506060870135915080821115612786578283fd5b5061257e8782880161246b565b600080600080606085870312156127a8578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156127cd578384fd5b818701915087601f8301126127e0578384fd5b8135818111156127ee578485fd5b8860208285010111156127ff578485fd5b95989497505060200194505050565b6000815180845261282681602086016020860161361f565b601f01601f19169290920160200192915050565b6000815161284c81856020860161361f565b9290920192915050565b80546000906002810460018083168061287057607f831692505b602080841082141561289057634e487b7160e01b86526022600452602486fd5b8180156128a457600181146128b5576128e2565b60ff198616895284890196506128e2565b6128be886134a6565b60005b868110156128da5781548b8201529085019083016128c1565b505084890196505b50505050505092915050565b6b1e17b9bb339f1e17b9bb339f60a11b8152600c0190565b7f3c2f7376673e3c7376672076696577426f783d2230203020333220333222207781527f696474683d22333222206865696768743d2233322220783d2233322220793d226020820152631999111f60e11b604082015260440190565b62227d7d60e81b815260030190565b6201116160ed1b815260030190565b6000825161299281846020870161361f565b9190910192915050565b7003d913730b6b2911d11213634ba3837b81607d1b815283516000906129c981601185016020890161361f565b7f222c20226465736372697074696f6e223a22426c6974706f707320617265206f6011918401918201527f6e636861696e20426c69746d61702064657269766174697665732e20546f206360318201527f6f6e7374727563742074686520617274776f726b2c20746865206f726967696e60518201527f616c20426c69746d6170207769746820636f72726573706f6e64696e6720746f60718201527f6b656e20494420697320666574636865642c20636f6c6c6167656420616e642060918201527f66696c746572656420746f2072657475726e2061206d6f646966696564206f6e60b18201527f636861696e205356472e222c2022696d616765223a202200000000000000000060d18201528451612aea8160e884016020890161361f565b612330612b04612afe60e884860101612971565b8761283a565b612962565b60007f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323082527f30302f737667222076696577426f783d22302030203634203634223e3c73766760208301527f2076696577426f783d22302030203332203332222077696474683d223332222060408301526b3432b4b3b43a1e911999111f60a11b60608301528851612ba281606c850160208d0161361f565b7f3c7376672076696577426f783d22302030203332203332222077696474683d22606c918401918201527f333222206865696768743d2233322220783d223332223e000000000000000000608c820152612bff60a382018a612856565b90508751612c11818360208c0161361f565b7f3c2f7376673e3c7376672076696577426f783d2230203020333220333222207791019081527f696474683d22333222206865696768743d2233322220793d223332223e0000006020820152612c95612c90612c8a612c84612c7f612c79603d87018d612856565b8b61283a565b612906565b88612856565b8661283a565b6128ee565b9a9950505050505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000082528251612cdb81601d85016020870161361f565b91909101601d0192915050565b60007f2270726f70657274696573223a207b20227265766973696f6e73223a2022000082528551612d2081601e850160208a0161361f565b70111610112a37b8102934b3b43a111d101160791b601e918401918201528551612d5181602f840160208a0161361f565b72111610112137ba3a37b6902632b33a111d101160691b602f92909101918201528451612d8581604284016020890161361f565b73111610112137ba3a37b6902934b3b43a111d101160611b604292909101918201528351612dba81605684016020880161361f565b016056019695505050505050565b60007f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000082528251612e0081601a85016020870161361f565b91909101601a0192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612e549083018461280e565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612eca57603f19888603018452612eb885835161280e565b94509285019290850190600101612e9c565b5092979650505050505050565b901515815260200190565b6000602082526121a8602083018461280e565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260099082015268109c0e9d154e8d0c0d60ba1b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526009908201526842703a75463a34303360b81b604082015260600190565b6000602082528251602083015260208301516080604084015261340f60a084018261280e565b90506040840151601f198085840301606086015261342d838361280e565b925060608601519150808584030160808601525061268f828261280e565b90815260200190565b60405181810167ffffffffffffffff81118282101715613476576134766136e1565b604052919050565b600067ffffffffffffffff821115613498576134986136e1565b50601f01601f191660200190565b60009081526020902090565b600082198211156134c5576134c56136b5565b500190565b6000826134d9576134d96136cb565b500490565b80825b60018086116134f05750610d24565b818704821115613502576135026136b5565b8086161561350f57918102915b9490941c9380026134e1565b60006121a86000198484600082613534575060016121a8565b81613541575060006121a8565b816001811461355757600281146135615761358e565b60019150506121a8565b60ff841115613572576135726136b5565b6001841b915084821115613588576135886136b5565b506121a8565b5060208310610133831016604e8410600b84101617156135c1575081810a838111156135bc576135bc6136b5565b6121a8565b6135ce84848460016134de565b8086048211156135e0576135e06136b5565b02949350505050565b6000816000190483118215151615613603576136036136b5565b500290565b60008282101561361a5761361a6136b5565b500390565b60005b8381101561363a578181015183820152602001613622565b83811115610be05750506000910152565b60028104600182168061365f57607f821691505b6020821081141561368057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561369a5761369a6136b5565b5060010190565b6000826136b0576136b06136cb565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461083757600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205af809cbc6e17112f0065cad965875e341fc0c4204accc4987e095e77f38fbb764736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2006,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 2153,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "filterMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(FilterMatrix)2148_storage)"
      },
      {
        "astId": 2164,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "BLITMAP_ADDRESS",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2166,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "ownerSaleEnd",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2170,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "filters",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 2173,
        "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
        "label": "filterNames",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(FilterMatrix)2148_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Blitpops.FilterMatrix)",
        "numberOfBytes": "32",
        "value": "t_struct(FilterMatrix)2148_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FilterMatrix)2148_storage": {
        "encoding": "inplace",
        "label": "struct Blitpops.FilterMatrix",
        "members": [
          {
            "astId": 2141,
            "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
            "label": "revisions",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2143,
            "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
            "label": "filter1",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2145,
            "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
            "label": "filter2",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2147,
            "contract": "contracts/Blitpops/Blitpops.sol:Blitpops",
            "label": "filter3",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}